name: Deploy CV Online

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  deploy:
    runs-on: ubuntu-latest

    if: github.event.pull_request.merged == true

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Create .env file (for local build)
        run: |
          echo "VITE_ACCESS_TOKEN=${{ secrets.VITE_ACCESS_TOKEN }}" > .env
          echo "VITE_API_ROOT=${{ secrets.VITE_API_ROOT }}" > .env

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: |
          if [ -e package-lock.json ]; then
            npm i
          else
            npm ci
          fi

      - name: Run Linter
        run: npm run lint

      # - name: Build App locally
      #   run: npm run build

      - name: Setup SSH Keys and known_hosts
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_DEPLOY_KEY }}" > ~/.ssh/github_rsa
          chmod 600 ~/.ssh/github_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/github_rsa

      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            set -e

            echo "Backup current project..."
            if [ -d ~/portfolio ]; then

              backup_dir=~/portfolio_backups
              mkdir -p $backup_dir

              backup_name=portfolio_backup_$(date +%s)
              rsync -a --exclude='node_modules' ~/portfolio $backup_dir/$backup_name

              cd $backup_dir
              backup_count=$(ls -d portfolio_backup_* | wc -l)
              if [ $backup_count -gt 2 ]; then
                ls -dt portfolio_backup_* | tail -n +3 | xargs rm -rf
                echo "Deleted the old backup version."
              fi
            fi

            if [ ! -d ~/portfolio ]; then
              git clone git@github.com:19521791/CV.git ~/portfolio
            fi

            cd ~/portfolio
            git pull origin main

            echo "Install dependencies..."
            npm install

            echo "Create .env file..."
            echo "VITE_ACCESS_TOKEN=${{ secrets.VITE_ACCESS_TOKEN }}" > .env
            echo "VITE_API_ROOT=${{ secrets.VITE_API_ROOT }}" >> .env

            echo "Clean up dist folder..."
            rm -rf dist

            echo "Build the project..."
            if ! npm run build; then
              echo "Build failed! Rolling back..."
              latest_backup=$(ls -dt $backup_dir/portfolio_backup_* | head -n 1)
              if [ -d "$latest_backup" ]; then
                rm -rf ~/portfolio
                cp -r $latest_backup ~/portfolio
                echo "Restoring from the latest backup."
              else
                echo "No backup version found for restoration."
              fi
              exit 1
            fi

            echo "Deploy to /var/www/portfolio..."
            sudo mkdir -p /var/www/portfolio
            sudo rm -rf /var/www/portfolio/dist
            sudo cp -r ~/portfolio/dist /var/www/portfolio/
            sudo chown -R www-data:www-data /var/www/portfolio/dist
            sudo chmod -R 755 /var/www/portfolio/dist

            echo "Clean up..."
            rm -rf ~/portfolio

            echo "Restarting Nginx..."
            if command -v nginx &> /dev/null; then
              sudo nginx -t && sudo systemctl restart nginx
            else
              echo "Nginx not found!"
              exit 1
            fi

      - name: Clean up SSH keys
        run: |
          rm -rf ~/.ssh/github_rsa
          unset SSH_AUTH_SOCK

      - name: Notify Telegram on Success
        if: success()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ✅ Deploy to Staging successfully! 🚀

            👤 Author: ${{ github.actor }}  
            🔥 PR: `${{ github.event.pull_request.title || github.event.head_commit.message || 'Unknown PR' }}` has been merged  
            📂 Repository: ${{ github.repository }}  

            🔗 See changes: https://github.com/${{ github.repository }}/commit/${{ github.sha }}

      - name: Notify Telegram on Failure
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ❌ Deploy to Staging failed!  

            👤 Author: ${{ github.actor }}  
            🔥 PR: `${{ github.event.pull_request.title || github.event.head_commit.message || 'Unknown PR' }}`  
            ⚠️ Error: Deployment failed at `${{ steps.build.outcome || 'unknown step' }}`  

            📜 Check logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}




